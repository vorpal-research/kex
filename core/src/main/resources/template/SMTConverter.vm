#parse("definitions.vm")
import org.jetbrains.research.kex.state.*
import org.jetbrains.research.kex.state.predicate.*
import org.jetbrains.research.kex.state.term.*
import org.jetbrains.research.kex.state.transformer.Memspaced
import org.jetbrains.research.kfg.ir.value.instruction.CmpOpcode

object ${solver}Converter : Loggable {
    fun convert(ps: PredicateState, ef: $factory, ctx: ${solver}Context, extractPath: Boolean = false): Bool_ = when (ps) {
#set($states = ["Basic", "Chain", "Choice"])
#foreach($state in $states)
        is ${state}State -> convert(ps, ef, ctx, extractPath)
#end
        else -> unreachable { log.error("Unknown PS type: $ps") }
    }

    fun convert(basic: BasicState, ef: $factory, ctx: ${solver}Context, extractPath: Boolean = false): Bool_ =
        basic.predicates().foldRight(ef.makeTrue()) { predicate, acc -> acc and convert(predicate, ef, ctx) }

    fun convert(chain: ChainState, ef: $factory, ctx: ${solver}Context, extractPath: Boolean = false): Bool_ =
        ef.makeTrue() and convert(chain.base, ef, ctx) and convert(chain.curr, ef, ctx)

    fun convert(choice: ChoiceState, ef: $factory, ctx: ${solver}Context, extractPath: Boolean = false): Bool_ {
        var res = ef.makeFalse()
        val contexts = mutableMapOf< Bool_, Z3Context >()
        for (branch in choice) {
            val newCtx = Z3Context(ctx)
            val state = convert(branch, ef, newCtx, extractPath)

            res = res or state
            if (!extractPath) {
                val path = branch.filterByType(PredicateType.Path())
                contexts[convert(path, ef, newCtx, true)] = newCtx
            }
        }
        ctx.switchOn("choice", contexts)
        return res
    }

#set($predicates = ["Call", "Catch", "DefaultSwitch", "Equality", "NewArray", "New", "Store", "Throw"])
    fun convert(predicate: Predicate, ef: $factory, ctx: ${solver}Context): Bool_ = when (predicate) {
#foreach($predicate in $predicates)
        is ${predicate}Predicate -> convert(predicate, ef, ctx)
#end
        else -> unreachable { log.error("Unknown predicate type: $predicate") }
    }

    fun convert(call: CallPredicate, ef: $factory, ctx: ${solver}Context): Bool_ = ef.makeTrue()
    fun convert(catch: CatchPredicate, ef: $factory, ctx: ${solver}Context): Bool_ = ef.makeTrue()
    fun convert(`throw`: ThrowPredicate, ef: $factory, ctx: ${solver}Context): Bool_ = ef.makeTrue()

    fun convert(defaultswitch: DefaultSwitchPredicate, ef: $factory, ctx: ${solver}Context): Bool_ {
        var res = ef.makeTrue()
        val cond = convert(defaultswitch.getCond(), ef, ctx) as? Int_
                        ?: unreachable { log.error("Non-integer term in switch") }
        for (case in defaultswitch.getCases()) {
            val case_ = convert(case, ef, ctx) as? Int_ ?: unreachable { log.error("Non-integer term in switch") }
            res = res and (cond neq case_).toBool()
        }
        return res
    }

    fun convert(equality: EqualityPredicate, ef: $factory, ctx: ${solver}Context): Bool_ {
        val lhv = convert(equality.getLhv(), ef, ctx)
        val rhv = convert(equality.getRhv(), ef, ctx)
        return lhv eq rhv
    }

    fun convert(newarray: NewArrayPredicate, ef: $factory, ctx: ${solver}Context): Bool_ {
        val memspace = (newarray.getLhv().type as? Memspaced<*>)?.memspace ?: 0
        val lhv = convert(newarray.getLhv(), ef, ctx) as? Ptr_ ?: unreachable { log.error("Non-ptr term in `new`") }
            val elementSize = ${factory}.getTypeSizeExpanded(newarray.elementType)
            val totalSize = newarray.getDimentions().fold(elementSize) { acc: Int, term: Term ->
            acc * ((term as? ConstIntTerm)?.value ?: 1024)
        }
        return lhv eq ctx.getLocalPtr(memspace, totalSize)
    }

    fun convert(new: NewPredicate, ef: $factory, ctx: ${solver}Context): Bool_ {
        val memspace = (new.getLhv().type as? Memspaced<*>)?.memspace ?: 0
        val lhv = convert(new.getLhv(), ef, ctx) as? Ptr_ ?: unreachable { log.error("Non-ptr term in `new`") }
        val elementSize = ${factory}.getTypeSizeExpanded(new.getLhv().type)
        return lhv eq ctx.getLocalPtr(memspace, elementSize)
    }

    fun convert(store: StorePredicate, ef: $factory, ctx: ${solver}Context): Bool_ {
        val memspace = (store.getLhv().type as? Memspaced<*>)?.memspace ?: 0
        val ptr = convert(store.getLhv(), ef, ctx) as? Ptr_ ?: unreachable { log.error("Non-ptr term in `new`") }
        val value = convert(store.getStoreVal(), ef, ctx)
        ctx.writeMemory(ptr, value, memspace)
        return ef.makeTrue()
    }

#set($terms = ["Argument", "ArrayLength", "ArrayLoad", "Binary", "Call", "Cast", "Cmp",
    "ConstBool", "ConstByte", "ConstChar", "ConstClass", "ConstDouble", "ConstFloat", "ConstInt", "ConstLong",
    "ConstShort", "ConstString", "FieldLoad", "InstanceOf", "Neg", "Null", "ReturnValue", "Value"])
    fun convert(term: Term, ef: $factory, ctx: ${solver}Context): Dynamic_ = when (term) {
#foreach($term in $terms)
        is ${term}Term -> convert(term, ef, ctx)
#end
        else -> unreachable { log.error("Unknown term type: $term") }
    }

    fun convert(argument: ArgumentTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ = ef.getVarByType(argument.type, argument.name)

    fun convert(arraylength: ArrayLengthTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        val memspace = (arraylength.getArrayRef().type as? Memspaced<*>)?.memspace ?: 0
        val ptr = convert(arraylength.getArrayRef(), ef, ctx) as? Ptr_
                ?: unreachable { log.error("Non-ptr term in `arraylength`") }

        return ctx.readBound(ptr, memspace)
    }

    fun convert(arrayload: ArrayLoadTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        TODO()
    }

    fun convert(binary: BinaryTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        TODO()
    }

    fun convert(call: CallTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        TODO()
    }

    fun convert(cast: CastTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        TODO()
    }

#macro(fcmp $opcode $default)
            is CmpOpcode.$opcode -> {
                val lhvf = lhv as? Float_ ?: unreachable { log.error("Non-float operands of `${opcode.toLowerCase()}`") }
                val rhvf = rhv as? Float_ ?: unreachable { log.error("Non-float operands of `${opcode.toLowerCase()}`") }
                val cases = mapOf(
                    (lhvf gt rhvf) to ef.makeIntConst(1),
                    (lhvf eq rhvf) to ef.makeIntConst(0),
                    (lhvf lt rhvf) to ef.makeIntConst(-1)
                )
                ef.switch(cases, ef.makeIntConst($default))
            }
#end
    fun convert(cmp: CmpTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        val lhv = convert(cmp.getLhv(), ef, ctx)
        val rhv = convert(cmp.getRhv(),ef, ctx)
#set($opcodes = ["Eq", "Neq", "Lt", "Gt", "Le", "Ge"])
        return when (cmp.opcode) {
#foreach($opcode in $opcodes)
            is CmpOpcode.$opcode -> lhv ${opcode.toLowerCase()} rhv
#end
#fcmp("Cmpg", 1)
#fcmp("Cmpl", -1)
        }
    }

    fun convert(const: ConstBoolTerm, ef: Z3ExprFactory, ctx: Z3Context): Dynamic_ = ef.makeBoolConst(const.value)
    fun convert(const: ConstByteTerm, ef: Z3ExprFactory, ctx: Z3Context): Dynamic_ = ef.makeIntConst(const.value.toInt())
    fun convert(const: ConstCharTerm, ef: Z3ExprFactory, ctx: Z3Context): Dynamic_ = ef.makeIntConst(const.value.toInt())

    fun convert(const: ConstClassTerm, ef: Z3ExprFactory, ctx: Z3Context): Dynamic_ {
        TODO()
    }

    fun convert(const: ConstDoubleTerm, ef: Z3ExprFactory, ctx: Z3Context): Dynamic_ = ef.makeDoubleConst(const.value)
    fun convert(const: ConstFloatTerm, ef: Z3ExprFactory, ctx: Z3Context): Dynamic_ = ef.makeFloatConst(const.value)
    fun convert(const: ConstIntTerm, ef: Z3ExprFactory, ctx: Z3Context): Dynamic_ = ef.makeIntConst(const.value)
    fun convert(const: ConstLongTerm, ef: Z3ExprFactory, ctx: Z3Context): Dynamic_ = ef.makeLongConst(const.value)
    fun convert(const: ConstShortTerm, ef: Z3ExprFactory, ctx: Z3Context): Dynamic_ = ef.makeIntConst(const.value.toInt())

    fun convert(const: ConstStringTerm, ef: Z3ExprFactory, ctx: Z3Context): Dynamic_ {
        TODO()
    }

    fun convert(fieldload: FieldLoadTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        TODO()
    }

    fun convert(instanceof: InstanceOfTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        TODO()
    }

    fun convert(neg: NegTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        val operand = convert(neg.getOperand(), ef, ctx) as? Bool_ ?: unreachable { log.error("Non-bool term in `neg`") }
        return !operand
    }

    fun convert(`null`: NullTerm, ef: Z3ExprFactory, ctx: Z3Context): Dynamic_ = ef.makeNull()

    fun convert(returnvalue: ReturnValueTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        TODO()
    }

    fun convert(value: ValueTerm, ef: $factory, ctx: ${solver}Context): Dynamic_ {
        TODO()
    }
}